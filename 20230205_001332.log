2023-02-05 00:13:32,461 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 00:13:32,462 - mmcls - INFO - Distributed training: False
2023-02-05 00:13:32,974 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='/HOME/scz5288/run/mmclassification/data/flower_data/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file=
        '/HOME/scz5288/run/mmclassification/data/flower_data/train.txt',
        classes=
        '/HOME/scz5288/run/mmclassification/data/flower_data/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='/HOME/scz5288/run/mmclassification/data/flower_data/val',
        ann_file='/HOME/scz5288/run/mmclassification/data/flower_data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes=
        '/HOME/scz5288/run/mmclassification/data/flower_data/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz5288/run/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 00:13:32,977 - mmcls - INFO - Set random seed to 268673657, deterministic: False
2023-02-05 00:13:33,348 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 00:13:33,551 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 00:13:41,303 - mmcls - INFO - load checkpoint from local path: /HOME/scz5288/run/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 00:13:41,484 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 00:13:41,485 - mmcls - INFO - Start running, host: scz5288@g0097, work_dir: /data/run01/scz5288/mmclassification/work/resnet18_b32_flower
2023-02-05 00:13:41,485 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 00:13:41,485 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 00:13:41,485 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz5288/mmclassification/work/resnet18_b32_flower by HardDiskBackend.
2023-02-05 00:13:49,806 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 00:13:53,066 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 00:13:58,523 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 00:13:59,494 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 00:14:04,948 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 00:14:05,903 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 00:14:11,401 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 00:14:12,353 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 00:14:17,807 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 00:14:18,755 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 00:14:24,203 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 00:14:25,160 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 00:14:30,598 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 00:14:31,565 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 00:14:36,991 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 00:14:37,941 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000
2023-02-05 00:14:43,352 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 00:14:44,301 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 00:14:49,709 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 00:14:50,663 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:14:56,111 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 00:14:57,076 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 00:15:02,499 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 00:15:03,458 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 00:15:08,872 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 00:15:09,822 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:15:15,261 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 00:15:16,222 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:15:21,636 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 00:15:22,587 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:15:28,036 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 00:15:28,984 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:15:34,431 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 00:15:35,392 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 00:15:40,847 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 00:15:41,811 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:15:47,276 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 00:15:48,232 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 00:15:53,642 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 00:15:54,607 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 00:16:00,089 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 00:16:01,038 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:16:06,455 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 00:16:07,411 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:16:12,880 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 00:16:13,834 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:16:19,291 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 00:16:20,239 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 00:16:25,663 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 00:16:26,620 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:16:32,124 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 00:16:33,081 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 00:16:38,517 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 00:16:39,474 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:16:44,911 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 00:16:45,863 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:16:51,287 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 00:16:52,244 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:16:57,688 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 00:16:58,642 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:17:04,043 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 00:17:05,001 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:17:10,428 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 00:17:11,380 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 00:17:16,825 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 00:17:17,783 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 00:17:23,194 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 00:17:24,158 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:17:29,624 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 00:17:30,572 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:17:36,038 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 00:17:36,989 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:17:42,442 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 00:17:43,401 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 00:17:48,860 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 00:17:49,815 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:17:55,224 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 00:17:56,181 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:18:01,630 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 00:18:02,576 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:18:08,009 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 00:18:08,963 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:18:14,393 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 00:18:15,345 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 00:18:20,746 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 00:18:21,714 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 00:18:27,134 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 00:18:28,092 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:18:33,513 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 00:18:34,466 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 00:18:39,863 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 00:18:40,814 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:18:46,237 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 00:18:47,195 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:18:52,646 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 00:18:53,605 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:18:59,046 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 00:18:59,999 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:19:05,442 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 00:19:06,398 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:19:11,825 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 00:19:12,784 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:19:18,207 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 00:19:19,158 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:19:24,582 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 00:19:25,546 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:19:30,957 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 00:19:31,910 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:19:37,356 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 00:19:38,313 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:19:43,752 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 00:19:44,760 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 00:19:50,186 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 00:19:51,147 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:19:56,602 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 00:19:57,556 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:20:03,728 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 00:20:04,749 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:20:10,169 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 00:20:11,133 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:20:16,533 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 00:20:17,493 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:20:22,913 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 00:20:23,866 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 00:20:29,306 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 00:20:30,294 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:20:35,796 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 00:20:36,764 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:20:42,228 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 00:20:43,181 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:20:48,611 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 00:20:49,571 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
